// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	adapter "sfvn_test/adapters/coingecko/dtos"

	mock "github.com/stretchr/testify/mock"
)

// CoingeckoService is an autogenerated mock type for the CoingeckoService type
type CoingeckoService struct {
	mock.Mock
}

type CoingeckoService_Expecter struct {
	mock *mock.Mock
}

func (_m *CoingeckoService) EXPECT() *CoingeckoService_Expecter {
	return &CoingeckoService_Expecter{mock: &_m.Mock}
}

// GetHOLC provides a mock function with given fields: symbol, period, startDate, endDate
func (_m *CoingeckoService) GetHOLC(symbol string, period string, startDate int64, endDate int64) ([]*adapter.DTOGetHOLCResponse, error) {
	ret := _m.Called(symbol, period, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetHOLC")
	}

	var r0 []*adapter.DTOGetHOLCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64, int64) ([]*adapter.DTOGetHOLCResponse, error)); ok {
		return rf(symbol, period, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64, int64) []*adapter.DTOGetHOLCResponse); ok {
		r0 = rf(symbol, period, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*adapter.DTOGetHOLCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64, int64) error); ok {
		r1 = rf(symbol, period, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CoingeckoService_GetHOLC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHOLC'
type CoingeckoService_GetHOLC_Call struct {
	*mock.Call
}

// GetHOLC is a helper method to define mock.On call
//   - symbol string
//   - period string
//   - startDate int64
//   - endDate int64
func (_e *CoingeckoService_Expecter) GetHOLC(symbol interface{}, period interface{}, startDate interface{}, endDate interface{}) *CoingeckoService_GetHOLC_Call {
	return &CoingeckoService_GetHOLC_Call{Call: _e.mock.On("GetHOLC", symbol, period, startDate, endDate)}
}

func (_c *CoingeckoService_GetHOLC_Call) Run(run func(symbol string, period string, startDate int64, endDate int64)) *CoingeckoService_GetHOLC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *CoingeckoService_GetHOLC_Call) Return(_a0 []*adapter.DTOGetHOLCResponse, _a1 error) *CoingeckoService_GetHOLC_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CoingeckoService_GetHOLC_Call) RunAndReturn(run func(string, string, int64, int64) ([]*adapter.DTOGetHOLCResponse, error)) *CoingeckoService_GetHOLC_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatePeriod provides a mock function with given fields: period, startDate, endDate
func (_m *CoingeckoService) ValidatePeriod(period string, startDate int64, endDate int64) error {
	ret := _m.Called(period, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePeriod")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, int64) error); ok {
		r0 = rf(period, startDate, endDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CoingeckoService_ValidatePeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatePeriod'
type CoingeckoService_ValidatePeriod_Call struct {
	*mock.Call
}

// ValidatePeriod is a helper method to define mock.On call
//   - period string
//   - startDate int64
//   - endDate int64
func (_e *CoingeckoService_Expecter) ValidatePeriod(period interface{}, startDate interface{}, endDate interface{}) *CoingeckoService_ValidatePeriod_Call {
	return &CoingeckoService_ValidatePeriod_Call{Call: _e.mock.On("ValidatePeriod", period, startDate, endDate)}
}

func (_c *CoingeckoService_ValidatePeriod_Call) Run(run func(period string, startDate int64, endDate int64)) *CoingeckoService_ValidatePeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *CoingeckoService_ValidatePeriod_Call) Return(_a0 error) *CoingeckoService_ValidatePeriod_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CoingeckoService_ValidatePeriod_Call) RunAndReturn(run func(string, int64, int64) error) *CoingeckoService_ValidatePeriod_Call {
	_c.Call.Return(run)
	return _c
}

// NewCoingeckoService creates a new instance of CoingeckoService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoingeckoService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoingeckoService {
	mock := &CoingeckoService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
