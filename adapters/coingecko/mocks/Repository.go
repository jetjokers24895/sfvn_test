// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	adapter "sfvn_test/adapters/coingecko/dtos"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// GetHOLCData provides a mock function with given fields: symbol, period, startDate, endDate
func (_m *Repository) GetHOLCData(symbol string, period string, startDate int64, endDate int64) ([]*adapter.DTOGetHOLCResponse, error) {
	ret := _m.Called(symbol, period, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetHOLCData")
	}

	var r0 []*adapter.DTOGetHOLCResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64, int64) ([]*adapter.DTOGetHOLCResponse, error)); ok {
		return rf(symbol, period, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64, int64) []*adapter.DTOGetHOLCResponse); ok {
		r0 = rf(symbol, period, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*adapter.DTOGetHOLCResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64, int64) error); ok {
		r1 = rf(symbol, period, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetHOLCData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHOLCData'
type Repository_GetHOLCData_Call struct {
	*mock.Call
}

// GetHOLCData is a helper method to define mock.On call
//   - symbol string
//   - period string
//   - startDate int64
//   - endDate int64
func (_e *Repository_Expecter) GetHOLCData(symbol interface{}, period interface{}, startDate interface{}, endDate interface{}) *Repository_GetHOLCData_Call {
	return &Repository_GetHOLCData_Call{Call: _e.mock.On("GetHOLCData", symbol, period, startDate, endDate)}
}

func (_c *Repository_GetHOLCData_Call) Run(run func(symbol string, period string, startDate int64, endDate int64)) *Repository_GetHOLCData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *Repository_GetHOLCData_Call) Return(_a0 []*adapter.DTOGetHOLCResponse, _a1 error) *Repository_GetHOLCData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetHOLCData_Call) RunAndReturn(run func(string, string, int64, int64) ([]*adapter.DTOGetHOLCResponse, error)) *Repository_GetHOLCData_Call {
	_c.Call.Return(run)
	return _c
}

// IsLeakData provides a mock function with given fields: period, startDate, startDateRes
func (_m *Repository) IsLeakData(period string, startDate int64, startDateRes int64) bool {
	ret := _m.Called(period, startDate, startDateRes)

	if len(ret) == 0 {
		panic("no return value specified for IsLeakData")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int64, int64) bool); ok {
		r0 = rf(period, startDate, startDateRes)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Repository_IsLeakData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLeakData'
type Repository_IsLeakData_Call struct {
	*mock.Call
}

// IsLeakData is a helper method to define mock.On call
//   - period string
//   - startDate int64
//   - startDateRes int64
func (_e *Repository_Expecter) IsLeakData(period interface{}, startDate interface{}, startDateRes interface{}) *Repository_IsLeakData_Call {
	return &Repository_IsLeakData_Call{Call: _e.mock.On("IsLeakData", period, startDate, startDateRes)}
}

func (_c *Repository_IsLeakData_Call) Run(run func(period string, startDate int64, startDateRes int64)) *Repository_IsLeakData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *Repository_IsLeakData_Call) Return(_a0 bool) *Repository_IsLeakData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_IsLeakData_Call) RunAndReturn(run func(string, int64, int64) bool) *Repository_IsLeakData_Call {
	_c.Call.Return(run)
	return _c
}

// SaveHOLC provides a mock function with given fields: symbol, period, values
func (_m *Repository) SaveHOLC(symbol string, period string, values []*adapter.DTOGetHOLCResponse) error {
	ret := _m.Called(symbol, period, values)

	if len(ret) == 0 {
		panic("no return value specified for SaveHOLC")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []*adapter.DTOGetHOLCResponse) error); ok {
		r0 = rf(symbol, period, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_SaveHOLC_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveHOLC'
type Repository_SaveHOLC_Call struct {
	*mock.Call
}

// SaveHOLC is a helper method to define mock.On call
//   - symbol string
//   - period string
//   - values []*adapter.DTOGetHOLCResponse
func (_e *Repository_Expecter) SaveHOLC(symbol interface{}, period interface{}, values interface{}) *Repository_SaveHOLC_Call {
	return &Repository_SaveHOLC_Call{Call: _e.mock.On("SaveHOLC", symbol, period, values)}
}

func (_c *Repository_SaveHOLC_Call) Run(run func(symbol string, period string, values []*adapter.DTOGetHOLCResponse)) *Repository_SaveHOLC_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]*adapter.DTOGetHOLCResponse))
	})
	return _c
}

func (_c *Repository_SaveHOLC_Call) Return(_a0 error) *Repository_SaveHOLC_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_SaveHOLC_Call) RunAndReturn(run func(string, string, []*adapter.DTOGetHOLCResponse) error) *Repository_SaveHOLC_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
