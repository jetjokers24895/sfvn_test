// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"
)

// HOLCRepo is an autogenerated mock type for the HOLCRepo type
type HOLCRepo struct {
	mock.Mock
}

type HOLCRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *HOLCRepo) EXPECT() *HOLCRepo_Expecter {
	return &HOLCRepo_Expecter{mock: &_m.Mock}
}

// CacheLatestPriceUserGot provides a mock function with given fields: uid, symbol, closePrice
func (_m *HOLCRepo) CacheLatestPriceUserGot(uid string, symbol string, closePrice decimal.Decimal) error {
	ret := _m.Called(uid, symbol, closePrice)

	if len(ret) == 0 {
		panic("no return value specified for CacheLatestPriceUserGot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, decimal.Decimal) error); ok {
		r0 = rf(uid, symbol, closePrice)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HOLCRepo_CacheLatestPriceUserGot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheLatestPriceUserGot'
type HOLCRepo_CacheLatestPriceUserGot_Call struct {
	*mock.Call
}

// CacheLatestPriceUserGot is a helper method to define mock.On call
//   - uid string
//   - symbol string
//   - closePrice decimal.Decimal
func (_e *HOLCRepo_Expecter) CacheLatestPriceUserGot(uid interface{}, symbol interface{}, closePrice interface{}) *HOLCRepo_CacheLatestPriceUserGot_Call {
	return &HOLCRepo_CacheLatestPriceUserGot_Call{Call: _e.mock.On("CacheLatestPriceUserGot", uid, symbol, closePrice)}
}

func (_c *HOLCRepo_CacheLatestPriceUserGot_Call) Run(run func(uid string, symbol string, closePrice decimal.Decimal)) *HOLCRepo_CacheLatestPriceUserGot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(decimal.Decimal))
	})
	return _c
}

func (_c *HOLCRepo_CacheLatestPriceUserGot_Call) Return(_a0 error) *HOLCRepo_CacheLatestPriceUserGot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HOLCRepo_CacheLatestPriceUserGot_Call) RunAndReturn(run func(string, string, decimal.Decimal) error) *HOLCRepo_CacheLatestPriceUserGot_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestPriceUserGot provides a mock function with given fields: uid, symbol
func (_m *HOLCRepo) GetLatestPriceUserGot(uid string, symbol string) (decimal.Decimal, error) {
	ret := _m.Called(uid, symbol)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestPriceUserGot")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (decimal.Decimal, error)); ok {
		return rf(uid, symbol)
	}
	if rf, ok := ret.Get(0).(func(string, string) decimal.Decimal); ok {
		r0 = rf(uid, symbol)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, symbol)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HOLCRepo_GetLatestPriceUserGot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestPriceUserGot'
type HOLCRepo_GetLatestPriceUserGot_Call struct {
	*mock.Call
}

// GetLatestPriceUserGot is a helper method to define mock.On call
//   - uid string
//   - symbol string
func (_e *HOLCRepo_Expecter) GetLatestPriceUserGot(uid interface{}, symbol interface{}) *HOLCRepo_GetLatestPriceUserGot_Call {
	return &HOLCRepo_GetLatestPriceUserGot_Call{Call: _e.mock.On("GetLatestPriceUserGot", uid, symbol)}
}

func (_c *HOLCRepo_GetLatestPriceUserGot_Call) Run(run func(uid string, symbol string)) *HOLCRepo_GetLatestPriceUserGot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *HOLCRepo_GetLatestPriceUserGot_Call) Return(_a0 decimal.Decimal, _a1 error) *HOLCRepo_GetLatestPriceUserGot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HOLCRepo_GetLatestPriceUserGot_Call) RunAndReturn(run func(string, string) (decimal.Decimal, error)) *HOLCRepo_GetLatestPriceUserGot_Call {
	_c.Call.Return(run)
	return _c
}

// NewHOLCRepo creates a new instance of HOLCRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHOLCRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *HOLCRepo {
	mock := &HOLCRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
